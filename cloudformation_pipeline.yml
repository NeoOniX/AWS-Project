Resources:
  # DynamoDB Tables
  GTOEmployesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GTOEmployes
      AttributeDefinitions:
        - AttributeName: EmployeeID
          AttributeType: S
      KeySchema:
        - AttributeName: EmployeeID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GTOTrucksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GTOTrucks
      AttributeDefinitions:
        - AttributeName: TruckID
          AttributeType: S
      KeySchema:
        - AttributeName: TruckID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GTODeliveriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GTODeliveries
      AttributeDefinitions:
        - AttributeName: DeliveryID
          AttributeType: S
      KeySchema:
        - AttributeName: DeliveryID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

       # Rôle IAM pour la Lambda Custom Resource
  GTOInitDataLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GTOInitDataLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GTOInitDataDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt GTOEmployesTable.Arn
                  - !GetAtt GTOTrucksTable.Arn
                  - !GetAtt GTODeliveriesTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda pour initialiser les données
  GTOInitDataLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GTOInitDataFunction
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt GTOInitDataLambdaRole.Arn
      Code:
        ZipFile: |
          const { DynamoDBClient, PutItemCommand } = require('@aws-sdk/client-dynamodb');
          const https = require('https');

          const client = new DynamoDBClient();

          exports.handler = async (event, context) => {
            console.log('Event:', JSON.stringify(event));
            
            if (event.RequestType === 'Delete') {
              // Pas besoin d’insérer de données en cas de suppression
              return sendResponse(event, context, 'SUCCESS');
            }

            try {
              // Exemple d’insertions (à adapter selon tes données)
              await client.send(new PutItemCommand({
                TableName: 'GTOEmployes',
                Item: {
                  EmployeeID: { S: 'emp1' },
                  Name: { S: 'John Doe' },
                  Role: { S: 'Driver' }
                }
              }));

              await client.send(new PutItemCommand({
                TableName: 'GTOTrucks',
                Item: {
                  TruckID: { S: 'truck1' },
                  Model: { S: 'Volvo FH' },
                  Status: { S: 'Active' }
                }
              }));

              await client.send(new PutItemCommand({
                TableName: 'GTODeliveries',
                Item: {
                  DeliveryID: { S: 'del1' },
                  Destination: { S: '123 Main St' },
                  Status: { S: 'Pending' }
                }
              }));

              return sendResponse(event, context, 'SUCCESS');
            } catch (error) {
              console.error(error);
              return sendResponse(event, context, 'FAILED');
            }
          };

          function sendResponse(event, context, responseStatus) {
            const responseBody = JSON.stringify({
              Status: responseStatus,
              Reason: `See the details in CloudWatch Log Stream: ${context.logStreamName}`,
              PhysicalResourceId: context.logStreamName,
              StackId: event.StackId,
              RequestId: event.RequestId,
              LogicalResourceId: event.LogicalResourceId,
              Data: {}
            });

            console.log('RESPONSE BODY:\n', responseBody);

            const parsedUrl = new URL(event.ResponseURL);
            const options = {
              hostname: parsedUrl.hostname,
              port: 443,
              path: parsedUrl.pathname + parsedUrl.search,
              method: 'PUT',
              headers: {
                'Content-Type': '',
                'Content-Length': Buffer.byteLength(responseBody)
              }
            };

            return new Promise((resolve, reject) => {
              const req = https.request(options, (res) => {
                console.log('Status code:', res.statusCode);
                console.log('Status message:', res.statusMessage);
                resolve();
              });

              req.on('error', (error) => {
                console.error('sendResponse Error:', error);
                reject();
              });

              req.write(responseBody);
              req.end();
            });
          }

  # Custom Resource
  GTOInitDataCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GTOInitDataLambda.Arn
    DependsOn: 
      - GTOEmployesTable
      - GTOTrucksTable
      - GTODeliveriesTable

  # LambdaFunctions
  GTOEmployesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GTOGetEmployes
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          const { DynamoDBClient, ScanCommand } = require('@aws-sdk/client-dynamodb');
          const client = new DynamoDBClient();

          exports.handler = async (event) => {
              const params = { TableName: 'GTOEmployes' };
              try {
                  const data = await client.send(new ScanCommand(params));
                  return {
                      statusCode: 200,
                      body: JSON.stringify(data.Items),
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message }),
                  };
              }
          };

      Role: !GetAtt GTOLambdaExecutionRole.Arn

  GTOTrucksLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GTOGetTrucks
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          const { DynamoDBClient, ScanCommand } = require('@aws-sdk/client-dynamodb');
          const client = new DynamoDBClient();

          exports.handler = async (event) => {
              const params = { TableName: 'GTOTrucks' };
              try {
                  const data = await client.send(new ScanCommand(params));
                  return {
                      statusCode: 200,
                      body: JSON.stringify(data.Items),
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message }),
                  };
              }
          };

      Role: !GetAtt GTOLambdaExecutionRole.Arn

  GTODeliveriesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GTOGetDeliveries
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          const { DynamoDBClient, ScanCommand } = require('@aws-sdk/client-dynamodb');
          const client = new DynamoDBClient();

          exports.handler = async (event) => {
              const params = { TableName: 'GTODeliveries' };
              try {
                  const data = await client.send(new ScanCommand(params));
                  return {
                      statusCode: 200,
                      body: JSON.stringify(data.Items),
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message }),
                  };
              }
          };
      Role: !GetAtt GTOLambdaExecutionRole.Arn

  GTOLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GTOLambdaDynamoDBExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GTODynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource: 
                  - !GetAtt GTOEmployesTable.Arn
                  - !GetAtt GTOTrucksTable.Arn
                  - !GetAtt GTODeliveriesTable.Arn

  # API Gateway
  GTOApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GTOCompanyApi

  GTOEmployesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GTOApiGateway.RootResourceId
      PathPart: employes
      RestApiId: !Ref GTOApiGateway

  GTOEmployesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref GTOEmployesResource
      RestApiId: !Ref GTOApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GTOEmployesLambdaFunction.Arn}/invocations

  GTOEmployesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GTOEmployesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GTOApiGateway}/*

  GTOTrucksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GTOApiGateway.RootResourceId
      PathPart: trucks
      RestApiId: !Ref GTOApiGateway

  GTOTrucksMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref GTOTrucksResource
      RestApiId: !Ref GTOApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GTOTrucksLambdaFunction.Arn}/invocations

  GTOTrucksLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GTOTrucksLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GTOApiGateway}/*

  GTODeliveriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GTOApiGateway.RootResourceId
      PathPart: deliveries
      RestApiId: !Ref GTOApiGateway

  GTODeliveriesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref GTODeliveriesResource
      RestApiId: !Ref GTOApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GTODeliveriesLambdaFunction.Arn}/invocations

  GTODeliveriesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GTODeliveriesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GTOApiGateway}/*

  # Deployment and Stage
  GTOApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GTOEmployesMethod
      - GTOTrucksMethod
      - GTODeliveriesMethod
    Properties:
      RestApiId: !Ref GTOApiGateway
      StageName: prod

  # S3 Bucket
  GTOStaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: gto-static-website-bucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  GTOStaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GTOStaticWebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: 
              AWS: "arn:aws:iam::719862224486:root"
            Action:
             - s3:GetObject
             - s3:PutObjectAcl
            Resource: !Sub '${GTOStaticWebsiteBucket.Arn}/*'

Outputs:
  GTOApiGatewayUrl:
    Value: !Sub 'https://${GTOApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Description: URL de l'API Gateway.
  GTOS3WebsiteUrl:
    Value: !Sub 'http://${GTOStaticWebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Description: URL de l'hébergement web statique S3.
