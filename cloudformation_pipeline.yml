Resources:
  # DynamoDB Tables
  GTOEmployesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GTOEmployes
      AttributeDefinitions:
        - AttributeName: EmployeeID
          AttributeType: S
      KeySchema:
        - AttributeName: EmployeeID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GTOTrucksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GTOTrucks
      AttributeDefinitions:
        - AttributeName: TruckID
          AttributeType: S
      KeySchema:
        - AttributeName: TruckID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GTODeliveriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GTODeliveries
      AttributeDefinitions:
        - AttributeName: DeliveryID
          AttributeType: S
      KeySchema:
        - AttributeName: DeliveryID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # LambdaFunctions
  GTOEmployesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GTOGetEmployes
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          const { DynamoDBClient, ScanCommand } = require('@aws-sdk/client-dynamodb');
          const client = new DynamoDBClient();

          exports.handler = async (event) => {
              const params = { TableName: 'GTOEmployes' };
              try {
                  const data = await client.send(new ScanCommand(params));
                  return {
                      statusCode: 200,
                      body: JSON.stringify(data.Items),
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message }),
                  };
              }
          };

      Role: !GetAtt GTOLambdaExecutionRole.Arn

    # Lambda for Adding Data to DynamoDb
  GTODynamoDBSeederLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GTOAddDataToDynamoDB
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          const { DynamoDBClient, PutItemCommand } = require('@aws-sdk/client-dynamodb');
          const client = new DynamoDBClient();

          exports.handler = async (event) => {
              const employees = [
                  { EmployeeID: { S: 'E001' }, Name: { S: 'John Doe' }, Position: { S: 'Driver' } },
                  { EmployeeID: { S: 'E002' }, Name: { S: 'Jane Smith' }, Position: { S: 'Manager' } },
              ];

              const trucks = [
                  { TruckID: { S: 'T001' }, Model: { S: 'Volvo' }, Capacity: { N: '10' } },
                  { TruckID: { S: 'T002' }, Model: { S: 'Mercedes' }, Capacity: { N: '12' } },
              ];

              const deliveries = [
                  { DeliveryID: { S: 'D001' }, DeliveryDate: { S: '2024-12-15' }, Status: { S: 'Completed' } },
                  { DeliveryID: { S: 'D002' }, DeliveryDate: { S: '2024-12-16' }, Status: { S: 'Pending' } },
              ];

              const putRequests = (tableName, items) => {
                  return items.map(item => {
                      return {
                          TableName: tableName,
                          Item: item
                      };
                  });
              };

              try {
                  const employeePromises = putRequests('GTOEmployes', employees).map(req => client.send(new PutItemCommand(req)));
                  const truckPromises = putRequests('GTOTrucks', trucks).map(req => client.send(new PutItemCommand(req)));
                  const deliveryPromises = putRequests('GTODeliveries', deliveries).map(req => client.send(new PutItemCommand(req)));

                  await Promise.all([...employeePromises, ...truckPromises, ...deliveryPromises]);

                  return {
                      statusCode: 200,
                      body: JSON.stringify({ message: 'Data inserted successfully' }),
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message }),
                  };
              }
          };

      Role: !GetAtt GTOLambdaExecutionRole.Arn

  # Custom Resource to Trigger Lambda after Stack Creation
  GTODynamoDBSeederCustomResource:
    Type: Custom::DynamoDBSeeder
    Properties:
      ServiceToken: !GetAtt GTODynamoDBSeederLambda.Arn

  # Add Permissions to Lambda Function
  GTODynamoDBSeederLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GTODynamoDBSeederLambda
      Action: lambda:InvokeFunction
      Principal: cloudformation.amazonaws.com

  GTOTrucksLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GTOGetTrucks
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          const { DynamoDBClient, ScanCommand } = require('@aws-sdk/client-dynamodb');
          const client = new DynamoDBClient();

          exports.handler = async (event) => {
              const params = { TableName: 'GTOTrucks' };
              try {
                  const data = await client.send(new ScanCommand(params));
                  return {
                      statusCode: 200,
                      body: JSON.stringify(data.Items),
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message }),
                  };
              }
          };

      Role: !GetAtt GTOLambdaExecutionRole.Arn

  GTODeliveriesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GTOGetDeliveries
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          const { DynamoDBClient, ScanCommand } = require('@aws-sdk/client-dynamodb');
          const client = new DynamoDBClient();

          exports.handler = async (event) => {
              const params = { TableName: 'GTODeliveries' };
              try {
                  const data = await client.send(new ScanCommand(params));
                  return {
                      statusCode: 200,
                      body: JSON.stringify(data.Items),
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message }),
                  };
              }
          };
      Role: !GetAtt GTOLambdaExecutionRole.Arn

  GTOLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GTOLambdaDynamoDBExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GTODynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource: 
                  - !GetAtt GTOEmployesTable.Arn
                  - !GetAtt GTOTrucksTable.Arn
                  - !GetAtt GTODeliveriesTable.Arn

  # API Gateway
  GTOApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GTOCompanyApi

  GTOEmployesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GTOApiGateway.RootResourceId
      PathPart: employes
      RestApiId: !Ref GTOApiGateway

  GTOEmployesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref GTOEmployesResource
      RestApiId: !Ref GTOApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GTOEmployesLambdaFunction.Arn}/invocations

  GTOEmployesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GTOEmployesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GTOApiGateway}/*

  GTOTrucksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GTOApiGateway.RootResourceId
      PathPart: trucks
      RestApiId: !Ref GTOApiGateway

  GTOTrucksMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref GTOTrucksResource
      RestApiId: !Ref GTOApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GTOTrucksLambdaFunction.Arn}/invocations

  GTOTrucksLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GTOTrucksLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GTOApiGateway}/*

  GTODeliveriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GTOApiGateway.RootResourceId
      PathPart: deliveries
      RestApiId: !Ref GTOApiGateway

  GTODeliveriesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref GTODeliveriesResource
      RestApiId: !Ref GTOApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GTODeliveriesLambdaFunction.Arn}/invocations

  GTODeliveriesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GTODeliveriesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GTOApiGateway}/*

  # Deployment and Stage
  GTOApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GTOEmployesMethod
      - GTOTrucksMethod
      - GTODeliveriesMethod
    Properties:
      RestApiId: !Ref GTOApiGateway
      StageName: prod

  # S3 Bucket
  GTOStaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: gto-static-website-bucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  GTOStaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GTOStaticWebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: 
              AWS: "arn:aws:iam::719862224486:root"
            Action:
             - s3:GetObject
             - s3:PutObjectAcl
            Resource: !Sub '${GTOStaticWebsiteBucket.Arn}/*'

Outputs:
  GTOApiGatewayUrl:
    Value: !Sub 'https://${GTOApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Description: URL de l'API Gateway.
  GTOS3WebsiteUrl:
    Value: !Sub 'http://${GTOStaticWebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Description: URL de l'hébergement web statique S3.
